// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/go-sdk/api/queues (interfaces: Queues,Queue)

// Package mockapi is a generated GoMock package.
package mockapi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	queues "github.com/nitrictech/go-sdk/api/queues"
)

// MockQueues is a mock of Queues interface.
type MockQueues struct {
	ctrl     *gomock.Controller
	recorder *MockQueuesMockRecorder
}

// MockQueuesMockRecorder is the mock recorder for MockQueues.
type MockQueuesMockRecorder struct {
	mock *MockQueues
}

// NewMockQueues creates a new mock instance.
func NewMockQueues(ctrl *gomock.Controller) *MockQueues {
	mock := &MockQueues{ctrl: ctrl}
	mock.recorder = &MockQueuesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueues) EXPECT() *MockQueuesMockRecorder {
	return m.recorder
}

// Queue mocks base method.
func (m *MockQueues) Queue(arg0 string) queues.Queue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queue", arg0)
	ret0, _ := ret[0].(queues.Queue)
	return ret0
}

// Queue indicates an expected call of Queue.
func (mr *MockQueuesMockRecorder) Queue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queue", reflect.TypeOf((*MockQueues)(nil).Queue), arg0)
}

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// Dequeue mocks base method.
func (m *MockQueue) Dequeue(arg0 context.Context, arg1 int) ([]queues.ReceivedMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue", arg0, arg1)
	ret0, _ := ret[0].([]queues.ReceivedMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockQueueMockRecorder) Dequeue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockQueue)(nil).Dequeue), arg0, arg1)
}

// Enqueue mocks base method.
func (m *MockQueue) Enqueue(arg0 context.Context, arg1 []map[string]interface{}) ([]*queues.FailedMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", arg0, arg1)
	ret0, _ := ret[0].([]*queues.FailedMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockQueueMockRecorder) Enqueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockQueue)(nil).Enqueue), arg0, arg1)
}

// Name mocks base method.
func (m *MockQueue) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockQueueMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockQueue)(nil).Name))
}
