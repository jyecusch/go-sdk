// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/proto/topics/v1 (interfaces: TopicsClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	topicspb "github.com/nitrictech/nitric/core/pkg/proto/topics/v1"
	grpc "google.golang.org/grpc"
)

// MockTopicsClient is a mock of TopicsClient interface.
type MockTopicsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTopicsClientMockRecorder
}

// MockTopicsClientMockRecorder is the mock recorder for MockTopicsClient.
type MockTopicsClientMockRecorder struct {
	mock *MockTopicsClient
}

// NewMockTopicsClient creates a new mock instance.
func NewMockTopicsClient(ctrl *gomock.Controller) *MockTopicsClient {
	mock := &MockTopicsClient{ctrl: ctrl}
	mock.recorder = &MockTopicsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicsClient) EXPECT() *MockTopicsClientMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockTopicsClient) Publish(arg0 context.Context, arg1 *topicspb.TopicPublishRequest, arg2 ...grpc.CallOption) (*topicspb.TopicPublishResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*topicspb.TopicPublishResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockTopicsClientMockRecorder) Publish(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockTopicsClient)(nil).Publish), varargs...)
}
