// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/proto/kvstore/v1 (interfaces: KvStoreClient,KvStore_ScanKeysClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kvstorepb "github.com/nitrictech/nitric/core/pkg/proto/kvstore/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockKvStoreClient is a mock of KvStoreClient interface.
type MockKvStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockKvStoreClientMockRecorder
}

// MockKvStoreClientMockRecorder is the mock recorder for MockKvStoreClient.
type MockKvStoreClientMockRecorder struct {
	mock *MockKvStoreClient
}

// NewMockKvStoreClient creates a new mock instance.
func NewMockKvStoreClient(ctrl *gomock.Controller) *MockKvStoreClient {
	mock := &MockKvStoreClient{ctrl: ctrl}
	mock.recorder = &MockKvStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKvStoreClient) EXPECT() *MockKvStoreClientMockRecorder {
	return m.recorder
}

// DeleteKey mocks base method.
func (m *MockKvStoreClient) DeleteKey(arg0 context.Context, arg1 *kvstorepb.KvStoreDeleteKeyRequest, arg2 ...grpc.CallOption) (*kvstorepb.KvStoreDeleteKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKey", varargs...)
	ret0, _ := ret[0].(*kvstorepb.KvStoreDeleteKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockKvStoreClientMockRecorder) DeleteKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockKvStoreClient)(nil).DeleteKey), varargs...)
}

// GetValue mocks base method.
func (m *MockKvStoreClient) GetValue(arg0 context.Context, arg1 *kvstorepb.KvStoreGetValueRequest, arg2 ...grpc.CallOption) (*kvstorepb.KvStoreGetValueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValue", varargs...)
	ret0, _ := ret[0].(*kvstorepb.KvStoreGetValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockKvStoreClientMockRecorder) GetValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockKvStoreClient)(nil).GetValue), varargs...)
}

// ScanKeys mocks base method.
func (m *MockKvStoreClient) ScanKeys(arg0 context.Context, arg1 *kvstorepb.KvStoreScanKeysRequest, arg2 ...grpc.CallOption) (kvstorepb.KvStore_ScanKeysClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanKeys", varargs...)
	ret0, _ := ret[0].(kvstorepb.KvStore_ScanKeysClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanKeys indicates an expected call of ScanKeys.
func (mr *MockKvStoreClientMockRecorder) ScanKeys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanKeys", reflect.TypeOf((*MockKvStoreClient)(nil).ScanKeys), varargs...)
}

// SetValue mocks base method.
func (m *MockKvStoreClient) SetValue(arg0 context.Context, arg1 *kvstorepb.KvStoreSetValueRequest, arg2 ...grpc.CallOption) (*kvstorepb.KvStoreSetValueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetValue", varargs...)
	ret0, _ := ret[0].(*kvstorepb.KvStoreSetValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetValue indicates an expected call of SetValue.
func (mr *MockKvStoreClientMockRecorder) SetValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockKvStoreClient)(nil).SetValue), varargs...)
}

// MockKvStore_ScanKeysClient is a mock of KvStore_ScanKeysClient interface.
type MockKvStore_ScanKeysClient struct {
	ctrl     *gomock.Controller
	recorder *MockKvStore_ScanKeysClientMockRecorder
}

// MockKvStore_ScanKeysClientMockRecorder is the mock recorder for MockKvStore_ScanKeysClient.
type MockKvStore_ScanKeysClientMockRecorder struct {
	mock *MockKvStore_ScanKeysClient
}

// NewMockKvStore_ScanKeysClient creates a new mock instance.
func NewMockKvStore_ScanKeysClient(ctrl *gomock.Controller) *MockKvStore_ScanKeysClient {
	mock := &MockKvStore_ScanKeysClient{ctrl: ctrl}
	mock.recorder = &MockKvStore_ScanKeysClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKvStore_ScanKeysClient) EXPECT() *MockKvStore_ScanKeysClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockKvStore_ScanKeysClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockKvStore_ScanKeysClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockKvStore_ScanKeysClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockKvStore_ScanKeysClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockKvStore_ScanKeysClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockKvStore_ScanKeysClient)(nil).Context))
}

// Header mocks base method.
func (m *MockKvStore_ScanKeysClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockKvStore_ScanKeysClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockKvStore_ScanKeysClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockKvStore_ScanKeysClient) Recv() (*kvstorepb.KvStoreScanKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*kvstorepb.KvStoreScanKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockKvStore_ScanKeysClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockKvStore_ScanKeysClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockKvStore_ScanKeysClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockKvStore_ScanKeysClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockKvStore_ScanKeysClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockKvStore_ScanKeysClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockKvStore_ScanKeysClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockKvStore_ScanKeysClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockKvStore_ScanKeysClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockKvStore_ScanKeysClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockKvStore_ScanKeysClient)(nil).Trailer))
}
