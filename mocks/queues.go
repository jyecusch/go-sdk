// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/proto/queues/v1 (interfaces: QueuesClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	queuespb "github.com/nitrictech/nitric/core/pkg/proto/queues/v1"
	grpc "google.golang.org/grpc"
)

// MockQueuesClient is a mock of QueuesClient interface.
type MockQueuesClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueuesClientMockRecorder
}

// MockQueuesClientMockRecorder is the mock recorder for MockQueuesClient.
type MockQueuesClientMockRecorder struct {
	mock *MockQueuesClient
}

// NewMockQueuesClient creates a new mock instance.
func NewMockQueuesClient(ctrl *gomock.Controller) *MockQueuesClient {
	mock := &MockQueuesClient{ctrl: ctrl}
	mock.recorder = &MockQueuesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueuesClient) EXPECT() *MockQueuesClientMockRecorder {
	return m.recorder
}

// Complete mocks base method.
func (m *MockQueuesClient) Complete(arg0 context.Context, arg1 *queuespb.QueueCompleteRequest, arg2 ...grpc.CallOption) (*queuespb.QueueCompleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Complete", varargs...)
	ret0, _ := ret[0].(*queuespb.QueueCompleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Complete indicates an expected call of Complete.
func (mr *MockQueuesClientMockRecorder) Complete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockQueuesClient)(nil).Complete), varargs...)
}

// Dequeue mocks base method.
func (m *MockQueuesClient) Dequeue(arg0 context.Context, arg1 *queuespb.QueueDequeueRequest, arg2 ...grpc.CallOption) (*queuespb.QueueDequeueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Dequeue", varargs...)
	ret0, _ := ret[0].(*queuespb.QueueDequeueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockQueuesClientMockRecorder) Dequeue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockQueuesClient)(nil).Dequeue), varargs...)
}

// Enqueue mocks base method.
func (m *MockQueuesClient) Enqueue(arg0 context.Context, arg1 *queuespb.QueueEnqueueRequest, arg2 ...grpc.CallOption) (*queuespb.QueueEnqueueResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enqueue", varargs...)
	ret0, _ := ret[0].(*queuespb.QueueEnqueueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockQueuesClientMockRecorder) Enqueue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockQueuesClient)(nil).Enqueue), varargs...)
}
