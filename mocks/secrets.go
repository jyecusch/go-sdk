// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/proto/secrets/v1 (interfaces: SecretManagerClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	secretspb "github.com/nitrictech/nitric/core/pkg/proto/secrets/v1"
	grpc "google.golang.org/grpc"
)

// MockSecretManagerClient is a mock of SecretManagerClient interface.
type MockSecretManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretManagerClientMockRecorder
}

// MockSecretManagerClientMockRecorder is the mock recorder for MockSecretManagerClient.
type MockSecretManagerClientMockRecorder struct {
	mock *MockSecretManagerClient
}

// NewMockSecretManagerClient creates a new mock instance.
func NewMockSecretManagerClient(ctrl *gomock.Controller) *MockSecretManagerClient {
	mock := &MockSecretManagerClient{ctrl: ctrl}
	mock.recorder = &MockSecretManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretManagerClient) EXPECT() *MockSecretManagerClientMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockSecretManagerClient) Access(arg0 context.Context, arg1 *secretspb.SecretAccessRequest, arg2 ...grpc.CallOption) (*secretspb.SecretAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Access", varargs...)
	ret0, _ := ret[0].(*secretspb.SecretAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Access indicates an expected call of Access.
func (mr *MockSecretManagerClientMockRecorder) Access(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockSecretManagerClient)(nil).Access), varargs...)
}

// Put mocks base method.
func (m *MockSecretManagerClient) Put(arg0 context.Context, arg1 *secretspb.SecretPutRequest, arg2 ...grpc.CallOption) (*secretspb.SecretPutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*secretspb.SecretPutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockSecretManagerClientMockRecorder) Put(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockSecretManagerClient)(nil).Put), varargs...)
}
