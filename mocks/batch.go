// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/proto/batch/v1 (interfaces: BatchClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	batchpb "github.com/nitrictech/nitric/core/pkg/proto/batch/v1"
	grpc "google.golang.org/grpc"
)

// MockBatchClient is a mock of BatchClient interface.
type MockBatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockBatchClientMockRecorder
}

// MockBatchClientMockRecorder is the mock recorder for MockBatchClient.
type MockBatchClientMockRecorder struct {
	mock *MockBatchClient
}

// NewMockBatchClient creates a new mock instance.
func NewMockBatchClient(ctrl *gomock.Controller) *MockBatchClient {
	mock := &MockBatchClient{ctrl: ctrl}
	mock.recorder = &MockBatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchClient) EXPECT() *MockBatchClientMockRecorder {
	return m.recorder
}

// SubmitJob mocks base method.
func (m *MockBatchClient) SubmitJob(arg0 context.Context, arg1 *batchpb.JobSubmitRequest, arg2 ...grpc.CallOption) (*batchpb.JobSubmitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitJob", varargs...)
	ret0, _ := ret[0].(*batchpb.JobSubmitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitJob indicates an expected call of SubmitJob.
func (mr *MockBatchClientMockRecorder) SubmitJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitJob", reflect.TypeOf((*MockBatchClient)(nil).SubmitJob), varargs...)
}
