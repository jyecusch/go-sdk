// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nitrictech/nitric/core/pkg/proto/storage/v1 (interfaces: StorageClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storagepb "github.com/nitrictech/nitric/core/pkg/proto/storage/v1"
	grpc "google.golang.org/grpc"
)

// MockStorageClient is a mock of StorageClient interface.
type MockStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientMockRecorder
}

// MockStorageClientMockRecorder is the mock recorder for MockStorageClient.
type MockStorageClientMockRecorder struct {
	mock *MockStorageClient
}

// NewMockStorageClient creates a new mock instance.
func NewMockStorageClient(ctrl *gomock.Controller) *MockStorageClient {
	mock := &MockStorageClient{ctrl: ctrl}
	mock.recorder = &MockStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorageClient) Delete(arg0 context.Context, arg1 *storagepb.StorageDeleteRequest, arg2 ...grpc.CallOption) (*storagepb.StorageDeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*storagepb.StorageDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageClient)(nil).Delete), varargs...)
}

// Exists mocks base method.
func (m *MockStorageClient) Exists(arg0 context.Context, arg1 *storagepb.StorageExistsRequest, arg2 ...grpc.CallOption) (*storagepb.StorageExistsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(*storagepb.StorageExistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockStorageClientMockRecorder) Exists(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockStorageClient)(nil).Exists), varargs...)
}

// ListBlobs mocks base method.
func (m *MockStorageClient) ListBlobs(arg0 context.Context, arg1 *storagepb.StorageListBlobsRequest, arg2 ...grpc.CallOption) (*storagepb.StorageListBlobsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBlobs", varargs...)
	ret0, _ := ret[0].(*storagepb.StorageListBlobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlobs indicates an expected call of ListBlobs.
func (mr *MockStorageClientMockRecorder) ListBlobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlobs", reflect.TypeOf((*MockStorageClient)(nil).ListBlobs), varargs...)
}

// PreSignUrl mocks base method.
func (m *MockStorageClient) PreSignUrl(arg0 context.Context, arg1 *storagepb.StoragePreSignUrlRequest, arg2 ...grpc.CallOption) (*storagepb.StoragePreSignUrlResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreSignUrl", varargs...)
	ret0, _ := ret[0].(*storagepb.StoragePreSignUrlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreSignUrl indicates an expected call of PreSignUrl.
func (mr *MockStorageClientMockRecorder) PreSignUrl(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreSignUrl", reflect.TypeOf((*MockStorageClient)(nil).PreSignUrl), varargs...)
}

// Read mocks base method.
func (m *MockStorageClient) Read(arg0 context.Context, arg1 *storagepb.StorageReadRequest, arg2 ...grpc.CallOption) (*storagepb.StorageReadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*storagepb.StorageReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStorageClientMockRecorder) Read(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorageClient)(nil).Read), varargs...)
}

// Write mocks base method.
func (m *MockStorageClient) Write(arg0 context.Context, arg1 *storagepb.StorageWriteRequest, arg2 ...grpc.CallOption) (*storagepb.StorageWriteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Write", varargs...)
	ret0, _ := ret[0].(*storagepb.StorageWriteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockStorageClientMockRecorder) Write(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStorageClient)(nil).Write), varargs...)
}
